// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/history": {
            "get": {
                "description": "Возвращает историю добавления/удаления сегментов  в виде csv файла.Принимает id пользователя и период времени .Если указан user_id , то возвращает историю конкретного пользователя, иначе - все историю заданного периода",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "GetHistory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Месяц",
                        "name": "month",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Год",
                        "name": "year",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        },
        "/segment": {
            "delete": {
                "description": "Удаляет сегмент.Принимает slug сегмента",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segment"
                ],
                "summary": "DeleteSegment",
                "parameters": [
                    {
                        "description": "slug",
                        "name": "slug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestDeleteSegment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        },
        "/segment/new": {
            "post": {
                "description": "Создает сегмент.Принимает slug сегмента и процент пользоватей,которым он присвоится.Если указан user_percent,то добавит созданный сегмент указанному проценту пользователей(округление идет в большую сторону) , добавит запись в history и вернет id пользователей,котором добавили созданный сегмент.Если такой сегмент уже существует,то выведет соответствующую ошибку.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segment"
                ],
                "summary": "CreateSegment",
                "parameters": [
                    {
                        "description": "slug",
                        "name": "slug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestCreateSegment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        },
        "/user": {
            "delete": {
                "description": "Удаляет пользователя.Принимает Id пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "DeleteUser",
                "parameters": [
                    {
                        "description": "id",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestDeleteUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        },
        "/user/new": {
            "post": {
                "description": "Создает пользователя.Принимает имя пользователя.Если такой пользователь уже существует,то выведете соответствующую ошибку.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "CreateUser",
                "parameters": [
                    {
                        "description": "username",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestCreateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        },
        "/user/segments": {
            "delete": {
                "description": "Удаляет сегменты пользователя.Принимает slug сегмента.Если у сегмента был TTL, то удаляет его из кэша.Также добавляет запись удаления в history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "DeleteSegmentsFromUser",
                "parameters": [
                    {
                        "description": "id",
                        "name": "segments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestDeleteSegmentsFromUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        },
        "/user/segments/add": {
            "post": {
                "description": "Добавляет сегменты пользователю.Принимает id пользователя и сегменты с полями slug и expire.Если в сегментах указаны expire,то добавляет заданным сегментам TTL.Также добавляет запись добавления в history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "AddSegmentsToUser",
                "parameters": [
                    {
                        "description": "id",
                        "name": "segments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestAddSegmentsToUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        },
        "/user/segments/{id}": {
            "get": {
                "description": "Возвращает сегметы пользовател.Принимает id пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "GetUsersSegments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.RequestAddSegmentsToUser": {
            "type": "object",
            "required": [
                "id",
                "segments"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "segments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Segment_AddSegmentsToUser"
                    }
                }
            }
        },
        "dto.RequestCreateSegment": {
            "type": "object",
            "required": [
                "slug"
            ],
            "properties": {
                "slug": {
                    "type": "string"
                },
                "user_percent": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "dto.RequestCreateUser": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.RequestDeleteSegment": {
            "type": "object",
            "required": [
                "slug"
            ],
            "properties": {
                "slug": {
                    "type": "string"
                }
            }
        },
        "dto.RequestDeleteSegmentsFromUser": {
            "type": "object",
            "required": [
                "id",
                "segments"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "segments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Segment_DeleteSegmentsFromUser"
                    }
                }
            }
        },
        "dto.RequestDeleteUser": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "httpresponse.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "response": {},
                "status": {
                    "type": "string"
                }
            }
        },
        "service.Expire": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "integer",
                    "minimum": 0
                },
                "hours": {
                    "type": "integer",
                    "minimum": 0
                },
                "minutes": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "service.Segment_AddSegmentsToUser": {
            "type": "object",
            "required": [
                "slug"
            ],
            "properties": {
                "expire": {
                    "$ref": "#/definitions/service.Expire"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "service.Segment_DeleteSegmentsFromUser": {
            "type": "object",
            "required": [
                "slug"
            ],
            "properties": {
                "slug": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
